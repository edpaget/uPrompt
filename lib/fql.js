// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Fql = {};

  Fql.Expression = (function() {
    function Expression() {}

    return Expression;

  })();

  Fql.Value = (function() {
    function Value() {
      this["eval"] = __bind(this["eval"], this);
    }

    Value.prototype["eval"] = function() {
      return this;
    };

    return Value;

  })();

  Fql.String = (function(_super) {
    __extends(String, _super);

    function String(string) {
      this.string = string;
      this.equalToString = __bind(this.equalToString, this);
      this.equalToCFunc = __bind(this.equalToCFunc, this);
      this.equalToField = __bind(this.equalToField, this);
      this.equalToNumber = __bind(this.equalToNumber, this);
      this.equalTo = __bind(this.equalTo, this);
    }

    String.prototype.equalTo = function(value) {
      return value.equalToString(this);
    };

    String.prototype.equalToNumber = function() {
      var _this = this;

      return new Fql.CFunc(function() {
        return false;
      });
    };

    String.prototype.equalToField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return i[name] === _this.string;
      });
    };

    String.prototype.equalToCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return _this.string === func(i);
      });
    };

    String.prototype.equalToString = function(_arg) {
      var string,
        _this = this;

      string = _arg.string;
      return new Fql.CFunc(function() {
        return string === _this.string;
      });
    };

    return String;

  })(Fql.Value);

  Fql.Number = (function(_super) {
    __extends(Number, _super);

    function Number(num) {
      this.num = num;
      this.pow = __bind(this.pow, this);
      this.log = __bind(this.log, this);
      this.greaterThanField = __bind(this.greaterThanField, this);
      this.greaterThanCFunc = __bind(this.greaterThanCFunc, this);
      this.greaterThanNumber = __bind(this.greaterThanNumber, this);
      this.greaterThan = __bind(this.greaterThan, this);
      this.equalToString = __bind(this.equalToString, this);
      this.equalToField = __bind(this.equalToField, this);
      this.equalToCFunc = __bind(this.equalToCFunc, this);
      this.equalToNumber = __bind(this.equalToNumber, this);
      this.equalTo = __bind(this.equalTo, this);
      this.multiplyField = __bind(this.multiplyField, this);
      this.multiplyCFunc = __bind(this.multiplyCFunc, this);
      this.multiplyNumber = __bind(this.multiplyNumber, this);
      this.multiply = __bind(this.multiply, this);
      this.reciprocal = __bind(this.reciprocal, this);
      this.negate = __bind(this.negate, this);
      this.addCFunc = __bind(this.addCFunc, this);
      this.addField = __bind(this.addField, this);
      this.addNumber = __bind(this.addNumber, this);
      this.add = __bind(this.add, this);
    }

    Number.prototype.add = function(value) {
      return value.addNumber(this);
    };

    Number.prototype.addNumber = function(_arg) {
      var num;

      num = _arg.num;
      return new Fql.Number(this.num + num);
    };

    Number.prototype.addField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return i[name] + _this.num;
      });
    };

    Number.prototype.addCFunc = function(value) {
      return value.addNumber(this);
    };

    Number.prototype.negate = function() {
      return new Fql.Number(-this.num);
    };

    Number.prototype.reciprocal = function() {
      return new Fql.Number(1 / this.num);
    };

    Number.prototype.multiply = function(value) {
      return value.multiplyNumber(this);
    };

    Number.prototype.multiplyNumber = function(_arg) {
      var num;

      num = _arg.num;
      return new Fql.Number(this.num * num);
    };

    Number.prototype.multiplyCFunc = function(value) {
      return value.multiplyNumber(this);
    };

    Number.prototype.multiplyField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return _this.num * i[name];
      });
    };

    Number.prototype.equalTo = function(value) {
      return value.equalToNumber(this);
    };

    Number.prototype.equalToNumber = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return num === _this.num;
      });
    };

    Number.prototype.equalToCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return _this.num === func(i);
      });
    };

    Number.prototype.equalToField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return _this.num === i[name];
      });
    };

    Number.prototype.equalToString = function(string) {
      return string.equalToNumber(this);
    };

    Number.prototype.greaterThan = function(value) {
      return value.greaterThanNumber(this);
    };

    Number.prototype.greaterThanNumber = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return num > _this.num;
      });
    };

    Number.prototype.greaterThanCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return func(i) > _this.num;
      });
    };

    Number.prototype.greaterThanField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return i[name] > _this.num;
      });
    };

    Number.prototype.log = function(_arg) {
      var num;

      num = _arg.num;
      return new Fql.Number(Math.log(this.num) / (num ? Math.log(num) : 1));
    };

    Number.prototype.pow = function(_arg) {
      var num;

      num = _arg.num;
      return new Fql.Number(Math.pow(this.num, num));
    };

    return Number;

  })(Fql.Value);

  Fql.CFunc = (function(_super) {
    __extends(CFunc, _super);

    function CFunc(func) {
      this.func = func;
      this.pow = __bind(this.pow, this);
      this.log = __bind(this.log, this);
      this.multiplyField = __bind(this.multiplyField, this);
      this.multiplyCFunc = __bind(this.multiplyCFunc, this);
      this.multiplyNumber = __bind(this.multiplyNumber, this);
      this.multiply = __bind(this.multiply, this);
      this.greaterThanField = __bind(this.greaterThanField, this);
      this.greaterThanCFunc = __bind(this.greaterThanCFunc, this);
      this.greaterThanNumber = __bind(this.greaterThanNumber, this);
      this.greaterThan = __bind(this.greaterThan, this);
      this.equalToString = __bind(this.equalToString, this);
      this.equalToField = __bind(this.equalToField, this);
      this.equalToCFunc = __bind(this.equalToCFunc, this);
      this.equalToNumber = __bind(this.equalToNumber, this);
      this.equalTo = __bind(this.equalTo, this);
      this.reciprocal = __bind(this.reciprocal, this);
      this.negate = __bind(this.negate, this);
      this.addCFunc = __bind(this.addCFunc, this);
      this.addField = __bind(this.addField, this);
      this.addNumber = __bind(this.addNumber, this);
      this.add = __bind(this.add, this);
    }

    CFunc.prototype.add = function(value) {
      return value.addCFunc(this);
    };

    CFunc.prototype.addNumber = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return _this.func(i) + num;
      });
    };

    CFunc.prototype.addField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return _this.func(i) + i[name];
      });
    };

    CFunc.prototype.addCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return _this.func(i) + func(i);
      });
    };

    CFunc.prototype.negate = function() {
      var _this = this;

      return new Fql.CFunc(function(i) {
        return -(_this.func(i));
      });
    };

    CFunc.prototype.reciprocal = function() {
      var _this = this;

      return new Fql.CFunc(function(i) {
        return 1 / _this.func(i);
      });
    };

    CFunc.prototype.equalTo = function(value) {
      return value.equalToCFunc(this);
    };

    CFunc.prototype.equalToNumber = function(value) {
      return value.equalToCFunc(this);
    };

    CFunc.prototype.equalToCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return _this.func(i) === func(i);
      });
    };

    CFunc.prototype.equalToField = function(_arg) {
      var field,
        _this = this;

      field = _arg.field;
      return new Fql.CFunc(function(i) {
        return _this.func(i) === i[field];
      });
    };

    CFunc.prototype.equalToString = function(string) {
      return string.equalToCFunc(this);
    };

    CFunc.prototype.greaterThan = function(value) {
      return value.greaterThanCFunc(this);
    };

    CFunc.prototype.greaterThanNumber = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return num > _this.func(i);
      });
    };

    CFunc.prototype.greaterThanCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return func(i) > _this.func(i);
      });
    };

    CFunc.prototype.greaterThanField = function(_arg) {
      var field,
        _this = this;

      field = _arg.field;
      return new Fql.CFunc(function(i) {
        return i[field] > _this.func(i);
      });
    };

    CFunc.prototype.multiply = function(value) {
      return value.multiplyCFunc(this);
    };

    CFunc.prototype.multiplyNumber = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return _this.func(i) * num;
      });
    };

    CFunc.prototype.multiplyCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return _this.func(i) * func(i);
      });
    };

    CFunc.prototype.multiplyField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return _this.func(i) * i[name];
      });
    };

    CFunc.prototype.log = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return Math.log(_this.func(i)) / (num ? Math.log(num) : 1);
      });
    };

    CFunc.prototype.pow = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return Math.pow(_this.func(i), num);
      });
    };

    return CFunc;

  })(Fql.Value);

  Fql.Field = (function(_super) {
    __extends(Field, _super);

    function Field(name) {
      this.name = name;
      this.pow = __bind(this.pow, this);
      this.log = __bind(this.log, this);
      this.reciprocal = __bind(this.reciprocal, this);
      this.negate = __bind(this.negate, this);
      this.mutliplyCFunc = __bind(this.mutliplyCFunc, this);
      this.multiplyField = __bind(this.multiplyField, this);
      this.multiplyNumber = __bind(this.multiplyNumber, this);
      this.multiply = __bind(this.multiply, this);
      this.greaterThanField = __bind(this.greaterThanField, this);
      this.greaterThanCFunc = __bind(this.greaterThanCFunc, this);
      this.greaterThanNumber = __bind(this.greaterThanNumber, this);
      this.greaterThan = __bind(this.greaterThan, this);
      this.equalToString = __bind(this.equalToString, this);
      this.equalToField = __bind(this.equalToField, this);
      this.equalToCFunc = __bind(this.equalToCFunc, this);
      this.equalToNumber = __bind(this.equalToNumber, this);
      this.equalTo = __bind(this.equalTo, this);
      this.addCFunc = __bind(this.addCFunc, this);
      this.addField = __bind(this.addField, this);
      this.addNumber = __bind(this.addNumber, this);
      this.add = __bind(this.add, this);
    }

    Field.prototype.add = function(value) {
      return value.addField(this);
    };

    Field.prototype.addNumber = function(value) {
      return value.addField(this);
    };

    Field.prototype.addField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return i[_this.name] + i[name];
      });
    };

    Field.prototype.addCFunc = function(value) {
      return value.addField(this);
    };

    Field.prototype.equalTo = function(value) {
      return value.equalToField(this);
    };

    Field.prototype.equalToNumber = function(value) {
      return vlue.equalToField(this);
    };

    Field.prototype.equalToCFunc = function(value) {
      return value.equalToField(this);
    };

    Field.prototype.equalToField = function(_arg) {
      var field,
        _this = this;

      field = _arg.field;
      return new Fql.CFunc(function(i) {
        return i[field] === i[_this.name];
      });
    };

    Field.prototype.equalToString = function(string) {
      return string.equalToField(this);
    };

    Field.prototype.greaterThan = function(value) {
      return value.greaterThanField(this);
    };

    Field.prototype.greaterThanNumber = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return num > i[_this.name];
      });
    };

    Field.prototype.greaterThanCFunc = function(_arg) {
      var func,
        _this = this;

      func = _arg.func;
      return new Fql.CFunc(function(i) {
        return func(i) > i[_this.name];
      });
    };

    Field.prototype.greaterThanField = function(_arg) {
      var field,
        _this = this;

      field = _arg.field;
      return new Fql.CFunc(function(i) {
        return i[field] > i[_this.name];
      });
    };

    Field.prototype.multiply = function(value) {
      return value.multiplyField(this);
    };

    Field.prototype.multiplyNumber = function(value) {
      return value.multiplyField(this);
    };

    Field.prototype.multiplyField = function(_arg) {
      var name,
        _this = this;

      name = _arg.name;
      return new Fql.CFunc(function(i) {
        return i[_this.name] * i[name];
      });
    };

    Field.prototype.mutliplyCFunc = function(value) {
      return value.multiplyField(this);
    };

    Field.prototype.negate = function() {
      var _this = this;

      return new Fql.CFunc(function(i) {
        return -i[_this.name];
      });
    };

    Field.prototype.reciprocal = function() {
      var _this = this;

      return new Fql.CFunc(function(i) {
        return 1 / i[_this.name];
      });
    };

    Field.prototype.log = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return Math.log(i[_this.name]) / (num ? Math.log(num) : 1);
      });
    };

    Field.prototype.pow = function(_arg) {
      var num,
        _this = this;

      num = _arg.num;
      return new Fql.CFunc(function(i) {
        return Math.pow(i[_this.name], num);
      });
    };

    return Field;

  })(Fql.Value);

  Fql.Select = (function(_super) {
    __extends(Select, _super);

    function Select(funcExp) {
      this.funcExp = funcExp;
      this["eval"] = __bind(this["eval"], this);
    }

    Select.prototype["eval"] = function() {
      return {
        func: this.funcExp["eval"]().func
      };
    };

    return Select;

  })(Fql.Expression);

  Fql.Filter = (function(_super) {
    __extends(Filter, _super);

    function Filter(funcExp) {
      this.funcExp = funcExp;
      this["eval"] = __bind(this["eval"], this);
    }

    Filter.prototype["eval"] = function() {
      return {
        func: this.funcExp["eval"]().func
      };
    };

    return Filter;

  })(Fql.Expression);

  Fql.NewField = (function(_super) {
    __extends(NewField, _super);

    function NewField(fieldName, funcExp) {
      this.fieldName = fieldName;
      this.funcExp = funcExp;
      this["eval"] = __bind(this["eval"], this);
    }

    NewField.prototype["eval"] = function() {
      return {
        field: this.fieldName.string.replace(' ', '_'),
        func: this.funcExp["eval"]().func
      };
    };

    return NewField;

  })(Fql.Expression);

  Fql.Add = (function(_super) {
    __extends(Add, _super);

    function Add(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    Add.prototype["eval"] = function() {
      return this.exp1["eval"]().add(this.exp2["eval"]());
    };

    return Add;

  })(Fql.Expression);

  Fql.Subtract = (function(_super) {
    __extends(Subtract, _super);

    function Subtract(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    Subtract.prototype["eval"] = function() {
      return this.exp1["eval"]().add(new Fql.Negate(this.exp2)["eval"]());
    };

    return Subtract;

  })(Fql.Expression);

  Fql.Negate = (function(_super) {
    __extends(Negate, _super);

    function Negate(exp) {
      this.exp = exp;
      this["eval"] = __bind(this["eval"], this);
    }

    Negate.prototype["eval"] = function() {
      return this.exp["eval"]().negate();
    };

    return Negate;

  })(Fql.Expression);

  Fql.Multiply = (function(_super) {
    __extends(Multiply, _super);

    function Multiply(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    Multiply.prototype["eval"] = function() {
      return this.exp1["eval"]().multiply(this.exp2["eval"]());
    };

    return Multiply;

  })(Fql.Expression);

  Fql.Reciprocal = (function(_super) {
    __extends(Reciprocal, _super);

    function Reciprocal(exp) {
      this.exp = exp;
      this["eval"] = __bind(this["eval"], this);
    }

    Reciprocal.prototype["eval"] = function() {
      return this.exp["eval"]().reciprocal();
    };

    return Reciprocal;

  })(Fql.Expression);

  Fql.Divide = (function(_super) {
    __extends(Divide, _super);

    function Divide(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    Divide.prototype["eval"] = function() {
      return this.exp1["eval"]().multiply(new Fql.Reciprocal(this.exp2)["eval"]());
    };

    return Divide;

  })(Fql.Expression);

  Fql.Log = (function(_super) {
    __extends(Log, _super);

    function Log(exp, base) {
      this.exp = exp;
      this.base = base;
      this["eval"] = __bind(this["eval"], this);
    }

    Log.prototype["eval"] = function() {
      console.log(this.base);
      if (this.base instanceof Fql.Number) {
        return this.exp["eval"]().log(this.base);
      } else {
        throw new Error("Base must be a FQL Number");
      }
    };

    return Log;

  })(Fql.Expression);

  Fql.Pow = (function(_super) {
    __extends(Pow, _super);

    function Pow(exp, pow) {
      this.exp = exp;
      this.pow = pow;
      this["eval"] = __bind(this["eval"], this);
    }

    Pow.prototype["eval"] = function() {
      console.log(this.pow);
      if (this.pow instanceof Fql.Number) {
        return this.exp["eval"]().pow(this.pow);
      } else {
        throw new Error("Pow must be an FQL Number");
      }
    };

    return Pow;

  })(Fql.Expression);

  Fql.Equality = (function(_super) {
    __extends(Equality, _super);

    function Equality(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    Equality.prototype["eval"] = function() {
      return this.exp1["eval"]().equalTo(this.exp2["eval"]());
    };

    return Equality;

  })(Fql.Expression);

  Fql.Not = (function(_super) {
    __extends(Not, _super);

    function Not(exp) {
      this.exp = exp;
      this["eval"] = __bind(this["eval"], this);
    }

    Not.prototype["eval"] = function() {
      var _this = this;

      return new Fql.CFunc(function(i) {
        return !_this.exp["eval"]().func(i);
      });
    };

    return Not;

  })(Fql.Expression);

  Fql.NotEquality = (function(_super) {
    __extends(NotEquality, _super);

    function NotEquality(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    NotEquality.prototype["eval"] = function() {
      return new Fql.Not(new Fql.Equality(this.exp1, this.exp2))["eval"]();
    };

    return NotEquality;

  })(Fql.Expression);

  Fql.GreaterThan = (function(_super) {
    __extends(GreaterThan, _super);

    function GreaterThan(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    GreaterThan.prototype["eval"] = function() {
      return this.exp1["eval"]().greaterThan(this.exp2["eval"]());
    };

    return GreaterThan;

  })(Fql.Expression);

  Fql.Or = (function(_super) {
    __extends(Or, _super);

    function Or(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    Or.prototype["eval"] = function() {
      var _this = this;

      return new Fql.CFunc(function(i) {
        return _this.exp1["eval"]().func(i) || _this.exp2["eval"]().func(i);
      });
    };

    return Or;

  })(Fql.Expression);

  Fql.GreaterThanOrEqual = (function() {
    function GreaterThanOrEqual(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    GreaterThanOrEqual.prototype["eval"] = function() {
      return new Fql.Or(new Fql.GreaterThan(this.exp1, this.exp2), new Fql.Equality(this.exp1, this.exp2))["eval"]();
    };

    return GreaterThanOrEqual;

  })();

  Fql.LessThan = (function() {
    function LessThan(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
      this["eval"] = __bind(this["eval"], this);
    }

    LessThan.prototype["eval"] = function() {
      return new Fql.GreaterThan(this.exp2, this.exp1)["eval"]();
    };

    return LessThan;

  })();

  Fql.LessThanOrEqual = (function() {
    function LessThanOrEqual() {
      this["eval"] = __bind(this["eval"], this);
    }

    LessThanOrEqual.prototype.construcotr = function(exp1, exp2) {
      this.exp1 = exp1;
      this.exp2 = exp2;
    };

    LessThanOrEqual.prototype["eval"] = function() {
      return new Fql.GreaterThanOrEqual(this.exp2, this.exp1)["eval"]();
    };

    return LessThanOrEqual;

  })();

}).call(this);
